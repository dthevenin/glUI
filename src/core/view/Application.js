/**
  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and 
  contributors. All rights reserved
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published
  by the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 *  All application inherit from vs.gl.Application class.<br/>
 *  This is the root component from which all other components (widgets, ...)
 *  are dependent on.
 *  @class
 *  All application inherit from vs.gl.Application class. <br/>
 *  This is the root component from which all other components (widgets, ...)
 *  are dependent on.
 *  <p>
 *  The class offers you a set of usefull method for laoding
 *  Javascript or CSS, know the current GUI orientation...
 *  <p>
 *  You should not create your own vs.gl.Application instante, because it is
 *  automatically generated by ViniSketch Designer.
 *
 *  @author David Thevenin
 *
 *  @extends vs.ui.View
 * @name vs.gl.Application
 *  @constructor
 *  Main constructor
 *
 * @param {string} type the event type [optional]
*/
var Application = function (config) {
  initWebGLRendering ();
  this._layout = undefined;
  
  this.parent = View;
  this.parent (config);
  this.constructor = Application;
};

var ORIENTATION_CHANGE_EVT =
  'onorientationchange' in window ? 'orientationchange' : 'resize';

Application.prototype = {
  
  /*****************************************************************
   *                Private members
   ****************************************************************/

  /**
   * @protected
   * @type {boolean}
   */
  _prevent_scroll : true,

  /*****************************************************************
   *
   ****************************************************************/
  /**
   * @protected
   * @function
   */
  initComponent : function ()
  {
    vs.Application_applications [this.id] = this;

    View.prototype.initComponent.call (this);
    this.preventScroll = true;

    var self = this;
    window.addEventListener (ORIENTATION_CHANGE_EVT, function (e) {
      var orientation = window.orientation;
      if (!util.isNumber (orientation)) {
        if (window.outerWidth >= window.outerHeight) {
          orientation = 90; // LANDSCAPE
        }
        else {
          orientation = 0; // PORTRAIT
        }
      }
      
      var target_id =
        window.deviceConfiguration.setOrientation (orientation);
      if (target_id) {
        var event = new vs.gl.Event ('deviceChanged', target_id);
        self.dispatchEvent (event);
      }
    });
    
    this.size = [window.innerWidth, window.innerHeight];
  },
  
  /**
   * Exit and terminate the application.
   * @name vs.gl.Application#exit 
   * @function
   */
  exit : function () {
    vs.ui.Application.exit ()
  },
  
  /**
   * @protected
   * @name vs.gl.Application#applicationStarted 
   * @function
   */
  applicationStarted : function () { },
  
  /**
   * Sets the active stylesheet for the HTML document according to
   * the specified pid.
   *
   * @private
   *
   * @name vs.gl.Application#setActiveStyleSheet 
   * @function
   * @param {string} title
   */
  setActiveStyleSheet : function (pid) {
    vs.ui.Application.setActiveStyleSheet (pid);
  },
  
  /**
   * @protected
   *
   * @name vs.gl.Application#orientationWillChange 
   * @function
   * @param {number} orientation = {0, 180, -90, 90}
   */
  orientationWillChange: function (orientation) { },
    
  /**
   *  @public
   *  Build the default dataflow associated to the application.
   *  If you have created your own dataflow (with new vs.core.Dataflow), you
   *  have to build it explicitly.
   *
   * @name vs.gl.Application#buildDataflow 
   * @function
   */
  buildDataflow: function () {
    vs._default_df_.build ();
  },
    
  /**
   *  Dynamically load a script into your application.
   *  <p/>
   *  When the download is completed, the event 'scriptloaded' is fired. <br/>
   *  If a error occurs, nothing happend, then you have to manage by
   *  your own possible error load.
   *  <p/>
   *  The callback function will receive as parameter a event like that:<br/>
   *  {type: 'scriptloaded', data: path}
   *  <p/>
   *  @example
   *  myApp.bind ('scriptloaded', ...);
   *  myApp.loadScript ("resources/other.css");
   *
   * @name vs.gl.Application#loadScript 
   * @function
   * @param {string} path the script url [mandatory]
   */
  loadScript : function (path) {
    var self = this, endScriptLoad = function (path) {
      var i, l, data, ab_event;
      if (!path) { return; }
      
      var event = new vs.gl.Event ('scriptloaded', path);
      self.dispatchEvent (event);
    };
    
    util.importFile (path, document, endScriptLoad, "js");
  },
  
  /**
   *  Dynamically load a CSS into your application.
   *
   *  When the download is completed, the event 'cssloaded' is fired <br/>
   *  If a error occurs, nothing happend, then you have to manage by
   *  your own possible error load.
   *  <p/>
   *  The callback function will receive as parameter a event like that:<br/>
   *  {type: 'cssloaded', data: path}
   *
   *  @example
   *  myApp.bind ('cssloaded', ...);
   *  myApp.loadCSS ("resources/other.css");
   *
   * @name vs.gl.Application#loadCSS 
   * @function
   *
   * @param {string} path the css url [mandatory]
   */
  loadCSS : function (path) {
    var self = this, endCssLoad = function (path) {
      var i, l, data, ab_event;
      if (!path) { return; }
      
      var event = new vs.gl.Event ('cssloaded', path);
      self.dispatchEvent (event);
    };

    util.importFile (path, document, endCssLoad, "css");
  }  
};
util.extendClass (Application, View);

/********************************************************************
                  Define class properties
********************************************************************/

util.defineClassProperties (Application, {
//   'size': {
//     /** 
//      * Getter|Setter for size.<br/>
//      * Gives access to the size of the vs.gl.Application
//      * @name vs.gl.Application#size 
//      *
//      * @type {Array.<number>}
//      */ 
//     set : function (v) {
//       if (!v) { return; }
//       if (!util.isArray (v) || v.length !== 2) { return; }
//       if (!util.isNumber (v[0]) || !util.isNumber(v[1])) { return; }
//       this._size [0] = v [0];
//       this._size [1] = v [1];
//       
//       this._updateSizeAndPos ();
//       
// //      window.resizeTo (this._size [0], this._size [1]);
//     },
//     
//     /**
//      * @ignore
//      * @type {Array.<number>}
//      */
//     get : function () {
//       return this._size.slice ();
//     }
//   },
  'preventScroll': {
    /** 
     * Getter|Setter for page scrolling cancel.<br/>
     * Set to true to cancel scrolling behavior and false to have the
     * normal behavior.<br/>
     * By default, the property is set to true.
     * 
     * @name vs.gl.Application#preventScroll 
     *
     * @type {boolean}
     */ 
    set : function (pScroll)
    {
      if (pScroll)
      {
        this._prevent_scroll = true;
        document.preventScroll = pScroll;
      }
      else
      {
        this._prevent_scroll = false;
        document.preventScroll = pScroll;
      }
    },
  
    /**
     * @ignore
     * @type {boolean}
     */
    get : function ()
    {
      this._prevent_scroll = document.preventScroll;
      return this.__prevent_scroll;
    }
  }
});

/********************************************************************
                      Export
*********************************************************************/
/** @private */
gl.Application = Application;
