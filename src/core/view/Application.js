/**
  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and 
  contributors. All rights reserved
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published
  by the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 *  All application inherit from Application class.<br/>
 *  This is the root component from which all other components (widgets, ...)
 *  are dependent on.
 *  @class
 *  All application inherit from Application class. <br/>
 *  This is the root component from which all other components (widgets, ...)
 *  are dependent on.
 *  <p>
 *  The class offers you a set of usefull method for laoding
 *  Javascript or CSS, know the current GUI orientation...
 *  <p>
 *  You should not create your own Application instante, because it is
 *  automatically generated by ViniSketch Designer.
 *
 *  @author David Thevenin
 *
 *  @extends vs.ui.View
 * @name Application
 *  @constructor
 *  Main constructor
 *
 * @param {string} type the event type [optional]
*/
var Application = function (config) {

  this._layout = undefined;
  
  this.parent = View;
  this.parent (config);
  this.constructor = Application;
};

var Application_applications = {};

var ORIENTATION_CHANGE_EVT =
  'onorientationchange' in window ? 'orientationchange' : 'resize';

/*****************************************************************
 *                Private members
 ****************************************************************/

/**
 * @protected
 * @type {boolean}
 */
Application.prototype._prevent_scroll = true;

/*****************************************************************
 *
 ****************************************************************/
/**
 * @protected
 * @function
 */
Application.prototype.initComponent = function ()
{
  Application_applications [this.id] = this;

  View.prototype.initComponent.call (this);
  this.preventScroll = true;

  /*
  var self = this;
  window.addEventListener (ORIENTATION_CHANGE_EVT, function (e) {
    var orientation = window.orientation;
    if (!util.isNumber (orientation)) {
      if (window.outerWidth >= window.outerHeight) {
        orientation = 90; // LANDSCAPE
      }
      else {
        orientation = 0; // PORTRAIT
      }
    }
    
    var target_id =
      window.deviceConfiguration.setOrientation (orientation);
    if (target_id) {
      var event = new Event ('deviceChanged', target_id);
      self.dispatchEvent (event);
    }
  });
  */
  
  this.size = [window.innerWidth, window.innerHeight];
};

/**
 * Exit and terminate the application.
 * @name Application#exit 
 * @function
 */
Application.prototype.exit = function () {
  vs.ui.Application.exit ();
};

/**
 * @protected
 * @name Application#applicationStarted 
 * @function
 */
Application.prototype.applicationStarted = function () { };

/**
 * @protected
 *
 * @name Application#orientationWillChange 
 * @function
 * @param {number} orientation = {0, 180, -90, 90}
 */
Application.prototype.orientationWillChange = function (orientation) { };

util.extendClass (Application, View);

/********************************************************************
                  Define class properties
********************************************************************/

util.addClassProperties (Application, {

  'preventScroll': {
    /** 
     * Getter|Setter for page scrolling cancel.<br/>
     * Set to true to cancel scrolling behavior and false to have the
     * normal behavior.<br/>
     * By default, the property is set to true.
     * 
     * @name Application#preventScroll 
     *
     * @type {boolean}
     */ 
    set : function (pScroll)
    {
      if (pScroll)
      {
        this._prevent_scroll = true;
        document.preventScroll = pScroll;
      }
      else
      {
        this._prevent_scroll = false;
        document.preventScroll = pScroll;
      }
    },
  
    /**
     * @ignore
     * @type {boolean}
     */
    get : function ()
    {
      this._prevent_scroll = document.preventScroll;
      return this.__prevent_scroll;
    }
  }
});

/**
 * @potected
 */
Application.start = function ()
{
  var key, obj;
  for (key in Application_applications) {
    obj = Application_applications [key];
    Configuration.applyToApplication (obj);
    obj.applicationStarted ();
    obj.refresh ();
  }
};
